data1$YoY.Rank,
data1$Contribution.Rank,
data1$Rev.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank,
data1$test)
colnames(y[,1])
DEA_tableau(data1$Target.Rank,
data1$YoY.Rank,
data1$Contribution.Rank,
data1$Rev.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank,
data1$test)
DEA_tableau<-function(.arg1,.arg2,.arg3,.arg4,.arg5,.arg6,.arg7,.arg8,.arg9){
#Input
x<-data.frame(.arg2,.arg3)
#Output
y<-data.frame(.arg4,.arg5,.arg6,.arg7,.arg8,.arg9)
i<-1
while (i<=ncol(y)){
if (is.na(y[,i])){y<-y[,-i]}
else{i<-i+1}
}
return(x,y)
}
DEA_tableau(data1$Target.Rank,
data1$YoY.Rank,
data1$Contribution.Rank,
data1$Rev.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank,
data1$test)
DEA_tableau<-function(.arg1,.arg2,.arg3,.arg4,.arg5,.arg6,.arg7,.arg8,.arg9){
#Input
x<-data.frame(.arg2,.arg3)
#Output
y<-data.frame(.arg4,.arg5,.arg6,.arg7,.arg8,.arg9)
i<-1
while (i<=ncol(y)){
if (is.na(y[,i])){y<-y[,-i]}
else{i<-i+1}
}
return(list(inputs=x,outputs=y))
}
DEA_tableau(data1$Target.Rank,
data1$YoY.Rank,
data1$Contribution.Rank,
data1$Rev.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank,
data1$test)
DEA_tableau<-function(.arg1,.arg2,.arg3,.arg4,.arg5,.arg6,.arg7,.arg8,.arg9){
#Input
x<-data.frame(.arg2,.arg3)
#Output
y<-data.frame(.arg4,.arg5,.arg6,.arg7,.arg8,.arg9)
i<-1
while (i<=ncol(y)){
if (is.na(y[1,i])){y<-y[,-i]}
else{i<-i+1}
}
return(list(inputs=x,outputs=y))
}
DEA_tableau(data1$Target.Rank,
data1$YoY.Rank,
data1$Contribution.Rank,
data1$Rev.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank,
data1$test)
x<-c(1,1)
x
x<-x[,-1]
x<-data.frame(1,1)
x<-x[,-1]
x
x<-x[,-1]
y<-data.frame(data1$Target.Rank)
y<-data.frame(data1$Target.Rank,
data1$YoY.Rank,
data1$Contribution.Rank,
data1$Rev.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank)
for_corr<-data.frame(x,y)
for_corr
cor(for_corr)
y<-data.frame(data1$Target.Rank)
y<-data.frame(data1$YoY.Rank,
data1$Contribution.Rank,
data1$Rev.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank)
for_corr<-data.frame(x,y)
cor(for_corr)
y<-data.frame(data1$Target.Rank)
y<-data.frame(data1$YoY.Rank,
data1$Contribution.Rank,
data1$Rev.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank)
for_corr<-data.frame(x,y)
cor(for_corr)
y<-data.frame(data1$Target.Rank,data1$YoY.Rank)
y<-data.frame(
data1$Contribution.Rank,
data1$Rev.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank)
for_corr<-data.frame(x,y)
cor(for_corr)
y<-data.frame(data1$Target.Rank,data1$YoY.Rank)
y<-data.frame(
data1$Contribution.Rank,
data1$Rev.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank)
for_corr<-data.frame(x,y)
cor(for_corr)
y<-data.frame(data1$Target.Rank,data1$YoY.Rank)
y<-data.frame(
data1$Contribution.Rank,
data1$Rev.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank)
for_corr<-data.frame(x=x,y=y)
cor(for_corr)
for_corr
x<-data.frame(data1$Target.Rank,data1$YoY.Rank)
y<-data.frame(
data1$Contribution.Rank,
data1$Rev.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Conversion.Rank)
for_corr<-data.frame(x=x,y=y)
cor(for_corr)
ma<-cor(for_corr)
ma[which(ma==1)]
which(ma==1)
ma[which(ma==1)]<-NULL
ma[which(ma==1),]<-NULL
ma
ma[,which(ma==1)]<-NULL
ma[1]
ma[c(which(ma==1))]<-NULL
which(ma==1)
ma[1,2]
ma[8]
ma[c(2,8)]
ma[as.vector(which(ma==1))]<-NULL
as.vector(which(ma==1))
ma[as.vector(which(ma==1))]
ma[which(ma==1)]
ma[which(ma==1)]<-NA
ma
d<-dea(x,y)
library(Benchmarking)
d<-dea(x,y)
d$lambda
d$lambda[,1]
round(d$lambda[,1],2)
DEA_tableau(data1$YoY.Rank,data1$Rev.Churn.Rank,data1$Staff.Churn.Rank)
DEA_tableau(data1$YoY.Rank,data1$Rev.Churn.Rank,data1$Staff.Churn.Rank,data1$Staff.Churn.Rank,data1$Staff.Churn.Rank,data1$Staff.Churn.Rank,data1$Staff.Churn.Rank)
DEA_tableau(data1$YoY.Rank,data1$Rev.Churn.Rank,data1$Staff.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Staff.Churn.Rank,data1$Staff.Churn.Rank,data1$Staff.Churn.Rank,data1$Staff.Churn.Rank,data1$Staff.Churn.Rank)
DEA_tableau<-function(.arg1,.arg2,.arg3,.arg4,.arg5,.arg6,.arg7,.arg8,.arg9){
#INPUTS
x<-data.frame(.arg2,.arg3)
i<-1
while (i<ncol(x)){
if (is.na(x[1,i])){x<-x[,-i]}
else{i<-i+1}
}
if (is.na(x[1,1])){x<-rep(1,nrow(x))} #if all of them are null use all one
#OUTPUTS
y<-data.frame(.arg4,.arg5,.arg6,.arg7,.arg8,.arg9)
i<-1
while (i<ncol(y)){
if (is.na(y[1,i])){y<-y[,-i]}
else{i<-i+1}
}
if (is.na(y[1,1])){x<-rep(1,nrow(y))} #if all of them are null use all one
#Compute Correlations
for_corr<-data.frame(x,y)
cor_matrix<-cor(for_corr)
cor_matrix[which(cor_matrix==1)]<-NA
#think how to add max and min correlations
#COMPUTE DEA
res<-dea(x,y,ORIENTATION = .arg1)
return(list(inputs=x,outputs=y,eff=res$eff,L=as.data.frame(res$lambda)))
}
DEA_tableau(data1$YoY.Rank,data1$Rev.Churn.Rank,data1$Staff.Churn.Rank,
data1$Staff.Churn.Rank,
data1$Staff.Churn.Rank,data1$Staff.Churn.Rank,data1$Staff.Churn.Rank,data1$Staff.Churn.Rank,data1$Staff.Churn.Rank)
warnings()
round(d$lambda[,1],2)
d$lambda
d$lambda[,1]
x<-data.frame(data1$Target.Rank,data1$YoY.Rank)
ncol(x)
x<-x[,-1]
ncol(x)
length(x)
x<-data.frame(data1$Target.Rank,data1$YoY.Rank)
lenght(x)
length(x)
x<-data.frame(x[,-1])
ncol(x)
x
x<-x[-1]
x
library(Rserve)
Rserve('-no--save')
Rserve(args = '-no--save')
Rserve(args = '--no-save')
library(Rserver)
library(Rserve)
Rserver
Rserve("-no--save")
Rserve("--no-save")
Rserve(args = "--no-save")
))
shiny::runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(echo = FALSE)
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
library(Rserve)
Rserve("--no-save")
Rserve(args = "--no-save")
library(Rserve)
Rserve(args = '--no-save')
library(Benchmarking)
#Function to Normalize weights so that they sum 1
normtoone<-function(weights){
weights_n<-weights
for (i in 1:nrow(weights)){
weights_n[i,]<-round(weights[i,]/sum(weights[i,]),6)}
return(weights_n)
}
databcrevall<-read.csv('/Users/ainize.cidoncha/git/ainize_velocity/RegionalRevenue_FirstAnalysis/Year comparison/YearComparison.csv')
databcrev1516<-databcrevall[which(databcrevall$Fiscal_Year=='FY15/16'),]
#select the fiscal years you want to use
databcrev<-databcrev1516
#Select inputs and outputs
View(databcrev)
databcrev$Revenue_Churn_pos<-1-databcrev$Revenue.Churn.. #in order to have a postivie outcput(as retention rate)
databcrev$Staff_Churn_Pos<-1-databcrev$Staff.Churn.. #in order to have a postivie outcput(as retention rate)
x<-as.matrix(databcrev[,c(33,12,15)]) #Gross pay, ave team size, Transm Rev
y<-as.matrix(databcrev[,c(3,6,17,36,35)]) #Actual,New Clients Rev,Conversion Rate Rev, staff churn, rev churn
View(x)
View(y)
#Option B ignore inputs and focus on outputs
#x<-as.matrix(rep(1,34)) #constant one
#y<-as.matrix(databcrev[,c(5,11,13,36,37,38,48,49)]) #New clients rev,avtual  Tager pos, YoYGr, Conver Rate,retention rate
#Compute Dea  VRS
res<-dea(x,y,ORIENTATION = 'in', SLACK = TRUE,DUAL = TRUE)
#Display summary results in a nice data frame
res.df <- data.frame(dmu = databcrev$Clive.BC,year=databcrev$Fiscal_Year, eff = round(res$eff,2),round(res$lambda,2))
eff_weights<-data.frame(DMU=databcrev$Clive.BC,year=databcrev$Fiscal_Year, round(normtoone(res$ux),3),round(normtoone(res$vy),3))
colnames(eff_weights)<-colnames(databcrev[,c(2,3,33,12,15,3,6,17,36,35)])
eff_weights$eff<-res$eff
View(res.df)
View(eff_weights)
#PROJECTIONS
#Compute the projection reducing inputs and mantaining outputs
proj.df<-data.frame(proj_input=res$lambda%*%x,dif_input=res$lambda%*%x-x,
dif_input_PER=(res$lambda%*%x-x)/x)
proj.df<<- data.frame(N=rownames(databcrev),DMU=databcrev$Clive.BC,YEAR=databcrev$Fiscal_Year, round(proj.df,2))
Short_proj<-proj.df[which(proj.df$dif_input.Trans_Revenue_Net!=0),c(2,7:12)] #See proj
View(Short_proj)
###############WITH WEIGHTS#######################
#restrictions on weights
dual<-matrix(c(0.5,0.5,0.5,0.5,0.5,0.5,2,2,2,2,2,2),ncol=2)
rd<-dea.dual(x,y,RTS ='vrs',ORIENTATION = 'in', DUAL = dual )
rd.df <- data.frame(dmu = databcrev$Clive.BC,year=databcrev$Fiscal_Year, eff = round(rd$eff,2),rd$u,rd$v)
rd.df<-data.frame(rd.df,norm(rd$u),norm(rd$v)) #Normalize weights
rd.df
View(rd.df)
eff_weights2<-data.frame(DMU=databcrev$Clive.BC,year=databcrev$Fiscal_Year, round(normtoone(rd$u),3),round(normtoone(rd$v),3))
#weights<-data.frame(DMU=databcrev$Clive.BC,year=databcrev$Fiscal_Year, round(res$ux,2),round(res$vy,2))
colnames(eff_weights2)<-colnames(databcrev[,c(2,3,33,12,15,3,6,17,36,35)])
eff_weights2$eff<-rd$eff
View(eff_weights2)
View(eff_weights)
View(eff_weights2)
#------------------------------------------------------------------------------#
#############PEOPLE MATRIX##########
#Contruct a dataset
datapeople<-read.csv('/Users/ainize.cidoncha/git/ainize_velocity/DEA/DEA POC/PeopleMatrix.csv')
datarevandcont<-read.csv('/Users/ainize.cidoncha/git/ainize_velocity/DEA/DEA POC/RegionalRevandContr.csv')
datapeople[is.na(datapeople)]<-0
datapeople$Revenue<-datarevandcont$Sum.Revenue
datapeople$Contribution<-datarevandcont$Sum.Contribution
View(datapeople)
strsplit("lambda 1", split, fixed = FALSE)
strsplit("lambda 1", fixed = TRUE)
strsplit("LAMBDA 1", " ")
library(Rserve)
Rserve('--no-save')
Rserve(args = '--no-save')
x<-c(1,2,3,4)
y<-c(2,6,5,7)
corm<-cor(x,y)
corm
x<-data.frame(a=c(1,2,3),b=c(3,4,5),c=c(8,7,9))
corm<-cor(x)
corm
corm[row(corm) == col(corm)]<-0
corm
corm<-cor.test(x)
library(Hmisc)
cor<-rcorr(x)
corr<-rcorr(x)
a<-rcorr(x)
rcorr(x)
rcorr(x, type="pearson")
rcorr(as.matrix(x), type="pearson")
x<-data.frame(a=c(1,2,3),b=c(3,4,5),c=c(8,7,9),c=c(4,5,2))
rcorr(x)
rcorr(as.matrix(x))
x<-c(1m2m3)
x<-c(1,2,3)
y<-c(3,5,8)
rcorr(x,y)
x<-c(1,2,3,7,8)
y<-c(3,4,5,6,7)
rcorr(x,y)
rcorr(x,y)
r<-rcorr(x,y)
r$r
r$n
?rcorr
r$P
r<-apply(r$P, 2, function(x) which(x == max(abs(r$P))))
r
max(r$P)
r$P
r
r<-rcorr(x,y)
r
r$P
test<-apply(r$P, 2, function(x) which(x == max(abs(r$P))))
test
max(abs(r$P))
max(r$P)
r$P
r$P[which(is.na(r$P))]<-0
r$P
max(r$P)
test<-apply(r$P, 2, function(x) which(x == max(abs(r$P))))
test
test<-apply(r$P, 2, function(x) which(x == 0.00795988))
test
test<-apply(r$P, 2, function(x) which(x == 0))
test
library(Rserve)
Rserve(args = --no-save)
Rserve(args = "--no-save")
library(Rserve)
library(Rserve)
Rserve(args='--no-save')
library(Rserve)
Rserve(args = "--no-save")
shiny::runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
?dataset()
runApp('Documents/Master/APP')
plot(c(1,2))
d<-as.matrix(1,2)
d
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
click = "plot_click"
library(plotly)
install.packages(ploty)
install.packages(plotly)
install.packages("plotly")
library(plotly)
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
install.packages("dygraphs")
library(dygraphs)
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
require(rCharts)
install.packages("rCharts")
library(rCharts)
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
column(width = 4,
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
shiny::runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
runApp('Documents/Master/APP')
library(Rserve)
Rserve(args = '--no-save')
library(Rserve)
Rserve(args = '--no-save')
shiny::runApp('git/AINIZE/Master/APP')
runApp('git/AINIZE/Master/APP')
runApp('git/AINIZE/Master/APP')
runApp('git/AINIZE/Master/APP')
runApp('git/AINIZE/Master/APP')
runApp('git/AINIZE/Master/APP')
runApp('git/AINIZE/Master/APP')
library(Rserve)
Rserve(args = '--no-save')
shiny::runApp('git/AINIZE/Master/APP')
runApp('git/AINIZE/Master/APP')
if (length(reactiveData$EXCEL) != 0){
runApp('git/AINIZE/Master/APP')
jhk
close()
library(Rserve)
Rserve(args='--no-save')
library(Rserve)
Rserve(args = '--no-save')
Rserve(args = "--no-save")
library(Rserve)
Rserve(args = '--no-save')
Rserve(args = "--save")
Rserve()
Rserve('--vanilla')
Rserve(args = '--vanilla')
Rserve('--vanilla')
Rserve(args = '--vanilla')
shiny::runApp('git/AINIZE/Master/APP')
runApp('git/AINIZE/Master/APP')
runApp('git/AINIZE/Master/APP')
runApp('git/AINIZE/Master/APP')
runApp('git/AINIZE/Master/APP')
runApp('git/AINIZE/Master/APP')
a<-c(1,2)
b<-c(3,4)
c(a,b)
for (i in 1:2){a<-c(a,i)}
a
setwd("~/ainizecm_git/blogdown_source")
blogdown::build_site()
blo
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blo
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blog
blogdown::serve_site()
blogdown::build_site()
